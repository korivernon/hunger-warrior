{"ast":null,"code":"var _jsxFileName = \"/Users/trapbookpro/Development/hwfront/src/components/Map.js\";\nimport React from \"react\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport Geocode from \"react-geocode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"us\");\nGeocode.setApiKey(\"AIzaSyAQGsvrhfxDeNrqgubmm4G9xC1sBpS5xSg\");\n\nclass MapContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: 0,\n      lng: 0,\n      loading: true,\n      lat2: 0,\n      lng2: 0,\n      isOpen: false\n    };\n    this.mapStyles = {\n      height: this.props.height ? this.props.height : \"500px\",\n      width: this.props.width ? this.props.width : \"100%\"\n    };\n    this.defaultCenter = {\n      lat: this.state.lat,\n      lng: this.state.lon\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.latlng1) {\n      this.setState({\n        lat: this.props.latlng1.latitude,\n        lng: this.props.latlng1.longitude,\n        loading: false\n      });\n\n      if (this.props.latlng2) {\n        this.setState({\n          lat2: this.props.latlng2.latitude,\n          lng2: this.props.latlng2.longitude,\n          loading: false\n        });\n      }\n    } else {\n      Geocode.fromAddress(this.props.address).then(response => {\n        const {\n          lat,\n          lng\n        } = response.results[0].geometry.location;\n        this.setState({\n          lat: lat,\n          lng: lng,\n          loading: false\n        });\n      });\n\n      if (this.props.address2) {\n        this.setState({\n          loading: true\n        });\n        Geocode.fromAddress(this.props.address2).then(response => {\n          const {\n            lat,\n            lng\n          } = response.results[0].geometry.location;\n          this.setState({\n            lat2: lat,\n            lng2: lng,\n            loading: false\n          });\n        });\n      }\n    }\n  }\n\n  render() {\n    return this.state.loading ? \"LOADING...\" : /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: \"AIzaSyAQGsvrhfxDeNrqgubmm4G9xC1sBpS5xSg\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: this.mapStyles,\n        zoom: this.props.address2 ? 10 : 13,\n        center: {\n          lat: this.state.lat,\n          lng: this.state.lng\n        },\n        children: [/*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: this.state.lat,\n            lng: this.state.lng\n          },\n          onClick: () => {\n            this.setState({\n              isOpen: !this.state.isOpen\n            });\n          },\n          children: this.state.isOpen ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n            position: {\n              lat: this.state.lat,\n              lng: this.state.lng\n            },\n            onCloseClick: () => this.setState({\n              isOpen: !this.state.isOpen\n            }),\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.props.storeName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), this.props.address2 || this.props.latlng2 ? /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: this.state.lat2,\n            lng: this.state.lng2\n          },\n          onClick: () => this.setState({\n            isOpen: !this.state.isOpen\n          }),\n          children: this.state.isOpen ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n            position: {\n              lat: this.state.lat2,\n              lng: this.state.lng2\n            },\n            onCloseClick: () => {\n              this.setState({\n                isOpen: !this.state.isOpen\n              });\n            },\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.props.shelterName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MapContainer;","map":{"version":3,"sources":["/Users/trapbookpro/Development/hwfront/src/components/Map.js"],"names":["React","GoogleMap","LoadScript","Marker","InfoWindow","Geocode","setLanguage","setRegion","setApiKey","MapContainer","Component","state","lat","lng","loading","lat2","lng2","isOpen","mapStyles","height","props","width","defaultCenter","lon","componentDidMount","latlng1","setState","latitude","longitude","latlng2","fromAddress","address","then","response","results","geometry","location","address2","render","storeName","shelterName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  GoogleMap,\n  LoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\nimport Geocode from \"react-geocode\";\n\nGeocode.setLanguage(\"en\");\nGeocode.setRegion(\"us\");\nGeocode.setApiKey(\"AIzaSyAQGsvrhfxDeNrqgubmm4G9xC1sBpS5xSg\");\n\nclass MapContainer extends React.Component {\n  state = {\n    lat: 0,\n    lng: 0,\n    loading: true,\n    lat2: 0,\n    lng2: 0,\n    isOpen: false,\n  };\n\n  mapStyles = {\n    height: this.props.height ? this.props.height : \"500px\",\n    width: this.props.width ? this.props.width : \"100%\",\n  };\n\n  defaultCenter = {\n    lat: this.state.lat,\n    lng: this.state.lon,\n  };\n\n  componentDidMount() {\n\n    if(this.props.latlng1) {\n      this.setState({lat : this.props.latlng1.latitude, lng : this.props.latlng1.longitude, loading : false}); \n      if(this.props.latlng2) {\n        this.setState({lat2 : this.props.latlng2.latitude, lng2 : this.props.latlng2.longitude, loading: false}); \n      }\n    }\n    else {\n      Geocode.fromAddress(this.props.address).then((response) => {\n        const { lat, lng } = response.results[0].geometry.location;\n        this.setState({ lat: lat, lng: lng, loading: false });\n      });\n  \n      if (this.props.address2) {\n        this.setState({ loading: true });\n        Geocode.fromAddress(this.props.address2).then((response) => {\n          const { lat, lng } = response.results[0].geometry.location;\n          this.setState({ lat2: lat, lng2: lng, loading: false });\n        });\n      }\n    }\n  }\n\n  render() {\n    return this.state.loading ? (\n      \"LOADING...\"\n    ) : (\n      <LoadScript googleMapsApiKey=\"AIzaSyAQGsvrhfxDeNrqgubmm4G9xC1sBpS5xSg\">\n        <GoogleMap\n          mapContainerStyle={this.mapStyles}\n          zoom={this.props.address2 ? 10 : 13}\n          center={{ lat: this.state.lat, lng: this.state.lng }}\n        >\n          <Marker\n            position={{ lat: this.state.lat, lng: this.state.lng }}\n            onClick={() => {\n              this.setState({ isOpen: !this.state.isOpen });\n            }}\n          >\n            {this.state.isOpen ? (\n              <InfoWindow\n                position={{ lat: this.state.lat, lng: this.state.lng }}\n                onCloseClick={() =>\n                  this.setState({ isOpen: !this.state.isOpen })\n                }\n              >\n                <p>{this.props.storeName}</p>\n              </InfoWindow>\n            ) : null}\n          </Marker>\n\n\n          {this.props.address2 || this.props.latlng2 ? (\n            <Marker\n              position={{ lat: this.state.lat2, lng: this.state.lng2 }}\n              onClick={() => this.setState({ isOpen: !this.state.isOpen })}\n            >\n              {this.state.isOpen ? (\n                <InfoWindow\n                  position={{ lat: this.state.lat2, lng: this.state.lng2 }}\n                  onCloseClick={() => {\n                    this.setState({ isOpen: !this.state.isOpen });\n                  }}\n                >\n                  <p>{this.props.shelterName}</p>\n                </InfoWindow>\n              ) : null}\n            </Marker>\n          ) : null}\n        </GoogleMap>\n      </LoadScript>\n    );\n  }\n}\n\nexport default MapContainer;\n"]},"metadata":{},"sourceType":"module"}