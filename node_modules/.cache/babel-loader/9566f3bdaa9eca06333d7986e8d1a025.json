{"ast":null,"code":"import fire from \"../fire\";\nconst db = fire.firestore();\nconst app = 'https://hungerwarriorapi.herokuapp.com'; //1.\n\nexport const authListener = (setUser, setLoading, setUserDetails) => {\n  fire.auth().onAuthStateChanged(user => {\n    if (user) {\n      // set the 'user' state variable to the current user\n      setUser(user);\n      getUserDetails(user.email, setUserDetails);\n      setLoading(false);\n    } else {\n      setUser(\"\");\n      setLoading(false);\n    }\n  });\n};\nexport const handleLogin2 = async (email, password, setEmailError, setPasswordError, setIsUser, setUser) => {\n  await fetch(`${app}/login/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(resp => resp.json()).then(resp => setUser(resp)).then(setIsUser(true)).then(handleLogin(email, password)).catch(error => console.log(error));\n};\nexport const getUserDetails = (email, setUserDetails) => {\n  fetch(`${app}/users?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setUserDetails(resp));\n};\nexport const getAllListings2 = (email = \"\", setListings) => {\n  if (!email) {\n    fetch(`${app}/listings`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(resp => setListings(resp));\n  } else {\n    fetch(`${app}/listings?email=${email}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(resp => setListings(resp));\n  }\n};\nexport const getOrders2 = async (email, setOrders) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setOrders(resp));\n};\nexport const getAllStores2 = async setStores => {\n  let results;\n  fetch('https://hungerwarriorapi.herokuapp.com/users', {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setStores(resp));\n};\nexport const getRequests2 = async (email, setRequests) => {\n  // access the `requests` table in our database\n  fetch(`${app}/requests?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setRequests(resp));\n};\nexport const handleNewRequest2 = async request_details => {\n  fetch(`${app}/requests/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(request_details)\n  }).then(resp => resp.json());\n};\nexport const getListingById2 = async (id, setListing) => {\n  fetch(`${app}/listings?id=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setListing(resp));\n};\nexport const getRequestById2 = async (id, setRequest) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests?id=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setRequest(resp));\n};\nexport const getOrder2 = async (id, setOrder) => {\n  fetch(`${app}/orders?id=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setOrder(resp));\n};\nexport const handleNewListing2 = async listing_details => {\n  fetch(`${app}/listings/`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(listing_details)\n  }).then(resp => resp.json());\n};\nexport const handleNewOrder2 = async order_details => {\n  fetch(`${app}/orders/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(order_details)\n  }).then(resp => resp.json());\n};\nexport const handleStatusChange2 = async (id, newStatus) => {\n  fetch(`${app}/orders/?id=${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newStatus)\n  }).then(resp => resp.json());\n};\nexport const deleteRequest2 = async id => {\n  fetch(`${app}/requests/?delete=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json());\n};\nexport const deleteListing2 = async id => {\n  fetch(`${app}/listings/?delete=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json());\n};\nexport const handleRequestStatusChange2 = async (id, newStatus) => {\n  fetch(`${app}/requests/?id=${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newStatus)\n  }).then(resp => resp.json());\n};\nexport const handleRequestStatusChange = async (id, newStatus) => {\n  return db.doc(`/requests/${id}`).update(\"request_status\", newStatus);\n};\nexport const handleLogin = (email, password) => {\n  //clearErrors();\n  //authenticate with firebase\n  fire.auth().signInWithEmailAndPassword(email, password).catch(err => {\n    switch (err.code) {\n      case \"auth/invalid-email\":\n      case \"auth/user-disabled\":\n      case \"auth/user-not-found\":\n        // in case we get these errors, set the emailError variable to the error message\n        break;\n\n      case \"auth/wrong-password\":\n        // same as above\n        break;\n    } // If success, call the `getUserDetails` function to get the user's details.\n\n  }).then(console.log(\"true\"));\n};\nlet token, userId;\n/*\n    Function to handle user sign up. \n    Parameters: \n    1. name : User's name\n    2. location : User's location \n    3. phone : User's phone \n    4. type : User's type (store/shelter)\n    5. email : User's email \n    6. password : User's password \n    7. setEmailError : State function to change/edit the state variable 'emailError'. Used when the email entered is invalid.\n    8. setPasswordError :  State function to change/edit the state variable 'passwordError'. Used when the password entered is invalid.\n  */\n\nexport const handleSignUp = (name, location, phone, type, email, image, password, setEmailError, setPasswordError) => {\n  // authenticate with fireabase\n  fire.auth().createUserWithEmailAndPassword(email, password).catch(err => {\n    switch (err.code) {\n      case \"auth/email-already-in-use\":\n      case \"auth/invalid-email\":\n        setEmailError(err.message);\n        break;\n\n      case \"auth/weak-password\":\n        setPasswordError(err.message);\n        break;\n    }\n  }).then(data => {\n    userId = data.user.uid;\n    return data.user.getIdToken();\n  }).then(token => {\n    token = token;\n    const userCredentials = {\n      name: name,\n      location: location,\n      phone: phone,\n      type: type,\n      email: email,\n      userId: userId,\n      image: image\n    };\n    return db.doc(`/users/${email}`).set(userCredentials);\n  });\n};\n/*\n    Function to handle user logout. \n    Parameters : None \n    -- Uses firebase's signOut() function. \n  */\n\nexport const handleLogout = () => {\n  fire.auth().signOut();\n};\n/*\n    Function to check if a user is already logged in. \n    Parameters : \n    1. setUser : State function to change/edit the 'user' state variable. \n    2. setLoading : State function to change/edit the 'loading' state variable. Used to display the loading icon. \n    3. setUserDetails : State function to change/edit the 'userDetails' state variable. \n  */","map":{"version":3,"sources":["/Users/trapbookpro/Development/hunger-warrior/src/functions/index.js"],"names":["fire","db","firestore","app","authListener","setUser","setLoading","setUserDetails","auth","onAuthStateChanged","user","getUserDetails","email","handleLogin2","password","setEmailError","setPasswordError","setIsUser","fetch","method","headers","body","JSON","stringify","then","resp","json","handleLogin","catch","error","console","log","getAllListings2","setListings","getOrders2","setOrders","getAllStores2","setStores","results","getRequests2","setRequests","handleNewRequest2","request_details","getListingById2","id","setListing","getRequestById2","setRequest","getOrder2","setOrder","handleNewListing2","listing_details","handleNewOrder2","order_details","handleStatusChange2","newStatus","deleteRequest2","deleteListing2","handleRequestStatusChange2","handleRequestStatusChange","doc","update","signInWithEmailAndPassword","err","code","token","userId","handleSignUp","name","location","phone","type","image","createUserWithEmailAndPassword","message","data","uid","getIdToken","userCredentials","set","handleLogout","signOut"],"mappings":"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","sourcesContent":["import fire from \"../fire\";\n\nconst db = fire.firestore();\nconst app = 'https://hungerwarriorapi.herokuapp.com'\n//1.\nexport const authListener = (setUser, setLoading, setUserDetails) => {\n  fire.auth().onAuthStateChanged((user) => {\n    if (user) {\n      // set the 'user' state variable to the current user\n      setUser(user);\n      getUserDetails(user.email, setUserDetails);\n      setLoading(false);\n    } else {\n      setUser(\"\");\n      setLoading(false);\n    }\n  });\n};\n\nexport const handleLogin2 = async (\n  email,\n  password,\n  setEmailError,\n  setPasswordError,\n  setIsUser,\n  setUser\n) => {\n  await fetch(`${app}/login/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password,\n    }),\n  })\n    .then((resp) => resp.json())\n    .then((resp) => setUser(resp))\n    .then(setIsUser(true))\n    .then(handleLogin(email, password))\n    .catch((error) => console.log(error));\n};\n\nexport const getUserDetails = (email, setUserDetails) => {\n  fetch(`${app}/users?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then((resp) => resp.json())\n    .then((resp) => setUserDetails(resp));\n};\n\nexport const getAllListings2 = (email = \"\", setListings) => {\n  if (!email) {\n    fetch(`${app}/listings`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((resp) => resp.json())\n      .then((resp) => setListings(resp));\n  } else {\n    fetch(`${app}/listings?email=${email}`, {\n      method : \"GET\",\n      headers : {\n        \"Content-Type\" : \"application/json\",\n      },\n    })\n    .then((resp) => resp.json())\n    .then((resp) => setListings(resp))\n  }\n};\n\nexport const getOrders2 = async (email, setOrders) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders?email=${email}`, {\n    method : \"GET\",\n    headers: {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then((resp) => setOrders(resp))\n};\n\nexport const getAllStores2 = async (setStores) => {\n  let results; \n  fetch('https://hungerwarriorapi.herokuapp.com/users', {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setStores(resp)); \n}\n\nexport const getRequests2 = async (email, setRequests) => {\n  // access the `requests` table in our database\n  fetch(`${app}/requests?email=${email}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setRequests(resp))\n}\n\nexport const handleNewRequest2 = async (request_details) => {\n  fetch(`${app}/requests/`, {\n    method : \"POST\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(request_details)\n  }).then((resp) => resp.json())\n}\n\nexport const getListingById2 = async (id, setListing) => {\n  fetch(`${app}/listings?id=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n  }).then((resp) => resp.json()).then(resp => setListing(resp))\n}\n\nexport const getRequestById2 = async (id, setRequest) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests?id=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setRequest(resp))\n}\n\nexport const getOrder2 = async (id, setOrder) => {\n  fetch(`${app}/orders?id=${id}`, {\n    method :  \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setOrder(resp))\n}\n\n\nexport const handleNewListing2 = async(listing_details) => {\n  fetch(`${app}/listings/`, {\n    method : 'POST',\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(listing_details)\n  }).then((resp) => resp.json())\n}\n\nexport const handleNewOrder2 = async(order_details) => {\n  \n  fetch(`${app}/orders/`, {\n    method : \"POST\",\n    headers : {\n      \"Content-Type\" : \"application/json\" \n    },\n    body : JSON.stringify(order_details)\n  }).then((resp) => resp.json())\n}\n\nexport const handleStatusChange2 = async (id, newStatus) => {\n  fetch(`${app}/orders/?id=${id}`, {\n    method : \"PUT\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(newStatus)\n  }).then((resp) => resp.json())\n}\n\nexport const deleteRequest2 = async (id) => {\n  fetch(`${app}/requests/?delete=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json())\n}\n\nexport const deleteListing2 = async (id) => {\n  fetch(`${app}/listings/?delete=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json())\n}\n\nexport const handleRequestStatusChange2 = async (id, newStatus) => {\n  fetch(`${app}/requests/?id=${id}`, {\n    method : \"PUT\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(newStatus)\n  }).then((resp) => resp.json())\n}\n \nexport const handleRequestStatusChange = async (id, newStatus) => {\n  return db.doc(`/requests/${id}`).update(\"request_status\", newStatus);\n};\n\n\nexport const handleLogin = (email, password) => {\n  //clearErrors();\n  //authenticate with firebase\n\n  fire\n    .auth()\n    .signInWithEmailAndPassword(email, password)\n    .catch((err) => {\n      switch (err.code) {\n        case \"auth/invalid-email\":\n        case \"auth/user-disabled\":\n        case \"auth/user-not-found\":\n          // in case we get these errors, set the emailError variable to the error message\n          break;\n        case \"auth/wrong-password\":\n          // same as above\n          break;\n      }\n      // If success, call the `getUserDetails` function to get the user's details.\n    })\n    .then(console.log(\"true\"));\n};\n\nlet token, userId;\n/*\n    Function to handle user sign up. \n    Parameters: \n    1. name : User's name\n    2. location : User's location \n    3. phone : User's phone \n    4. type : User's type (store/shelter)\n    5. email : User's email \n    6. password : User's password \n    7. setEmailError : State function to change/edit the state variable 'emailError'. Used when the email entered is invalid.\n    8. setPasswordError :  State function to change/edit the state variable 'passwordError'. Used when the password entered is invalid.\n  */\nexport const handleSignUp = (\n  name,\n  location,\n  phone,\n  type,\n  email,\n  image,\n  password,\n  setEmailError,\n  setPasswordError\n) => {\n  // authenticate with fireabase\n  fire\n    .auth()\n    .createUserWithEmailAndPassword(email, password)\n    .catch((err) => {\n      switch (err.code) {\n        case \"auth/email-already-in-use\":\n        case \"auth/invalid-email\":\n          setEmailError(err.message);\n          break;\n        case \"auth/weak-password\":\n          setPasswordError(err.message);\n          break;\n      }\n    })\n    .then((data) => {\n      userId = data.user.uid;\n      return data.user.getIdToken();\n    })\n    .then((token) => {\n      token = token;\n      const userCredentials = {\n        name: name,\n        location: location,\n        phone: phone,\n        type: type,\n        email: email,\n        userId: userId,\n        image: image,\n      };\n      return db.doc(`/users/${email}`).set(userCredentials);\n    });\n};\n\n/*\n    Function to handle user logout. \n    Parameters : None \n    -- Uses firebase's signOut() function. \n  */\nexport const handleLogout = () => {\n  fire.auth().signOut();\n};\n\n/*\n    Function to check if a user is already logged in. \n    Parameters : \n    1. setUser : State function to change/edit the 'user' state variable. \n    2. setLoading : State function to change/edit the 'loading' state variable. Used to display the loading icon. \n    3. setUserDetails : State function to change/edit the 'userDetails' state variable. \n  */\n"]},"metadata":{},"sourceType":"module"}