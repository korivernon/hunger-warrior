{"ast":null,"code":"import fire from \"../fire\";\nimport Geocode from \"react-geocode\";\nconst db = fire.firestore(); //1.\n\nexport const authListener = (setUser, setLoading, setUserDetails) => {\n  fire.auth().onAuthStateChanged(user => {\n    if (user) {\n      // set the 'user' state variable to the current user\n      setUser(user);\n      getUserDetails(user.email, setUserDetails);\n      setLoading(false);\n    } else {\n      setUser(\"\");\n      setLoading(false);\n    }\n  });\n};\nexport const handleLogin2 = async (email, password, setEmailError, setPasswordError, setIsUser, setUser) => {\n  await fetch(`https://hungerwarriorapi.herokuapp.com/login/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password\n    })\n  }).then(resp => resp.json()).then(resp => setUser(resp)).then(setIsUser(true)).then(handleLogin(email, password)).catch(error => console.log(error));\n};\nexport const getUserDetails = (email, setUserDetails) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/users?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setUserDetails(resp));\n};\nexport const getAllListings2 = (email = \"\", setListings) => {\n  if (!email) {\n    fetch(\"https://hungerwarriorapi.herokuapp.com/listings\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(resp => setListings(resp));\n  } else {\n    fetch(`https://hungerwarriorapi.herokuapp.com/listings?email=${email}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(resp => resp.json()).then(resp => setListings(resp));\n  }\n};\nexport const getOrders2 = async (email, setOrders) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setOrders(resp));\n};\nexport const getAllStores2 = async setStores => {\n  fetch('https://hungerwarriorapi.herokuapp.com/users?role=Store', {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setStores(resp));\n};\nexport const getAllShelters = async setShelters => {\n  fetch('https://hungerwarriorapi.herokuapp.com/users?role=Shelter', {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setShelters(resp));\n};\nexport const getTotalValue = async (email, setTotalValue) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/totalValue?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setTotalValue(resp));\n};\nexport const getRequests2 = async (email, setRequests) => {\n  // access the `requests` table in our database\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setRequests(resp));\n};\nexport const handleNewRequest2 = async request_details => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(request_details)\n  }).then(resp => resp.json());\n};\nexport const getListingById2 = async (id, setListing) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/listings?id=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setListing(resp));\n};\nexport const getRequestById2 = async (id, setRequest) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests?id=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setRequest(resp));\n};\nexport const getOrder2 = async (id, setOrder) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders?id=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json()).then(resp => setOrder(resp));\n};\nexport const handleNewListing2 = async listing_details => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/listings/`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(listing_details)\n  }).then(resp => resp.json());\n};\nexport const handleNewOrder2 = async order_details => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(order_details)\n  }).then(resp => resp.json());\n};\nexport const handleStatusChange2 = async (id, newStatus) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders/?id=${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newStatus)\n  }).then(resp => resp.json());\n};\nexport const handleDelivererStatusChange = async (id, name, phone) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders/?id=${id}&deliverer=True/`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      name: name,\n      phone: phone\n    })\n  }).then(resp => resp.json());\n};\nexport const deleteRequest2 = async id => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests/?delete=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json());\n};\nexport const deleteListing2 = async id => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/listings/?delete=${id}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(resp => resp.json());\n};\nexport const handleRequestStatusChange2 = async (id, newStatus) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests/?id=${id}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newStatus)\n  }).then(resp => resp.json());\n};\nexport const handleLogin = (email, password) => {\n  //clearErrors();\n  //authenticate with firebase\n  fire.auth().signInWithEmailAndPassword(email, password).catch(err => {\n    switch (err.code) {\n      case \"auth/invalid-email\":\n      case \"auth/user-disabled\":\n      case \"auth/user-not-found\":\n        // in case we get these errors, set the emailError variable to the error message\n        break;\n\n      case \"auth/wrong-password\":\n        // same as above\n        break;\n    } // If success, call the `getUserDetails` function to get the user's details.\n\n  }).then(console.log(\"true\"));\n};\nlet token, userId;\nexport const handleSignUp = async (name, location, phone, type, email, image, password, setEmailError, setPasswordError, setSignUpStatus) => {\n  // authenticate with fireabase\n  let userCredentials;\n  let latlng = {};\n  await Geocode.fromAddress(location).then(response => {\n    const {\n      lat,\n      lng\n    } = response.results[0].geometry.location;\n    latlng = {\n      latitude: lat,\n      longitude: lng\n    };\n  });\n  userCredentials = {\n    name: name,\n    location: location,\n    phone: phone,\n    type: type,\n    email: email,\n    userId: userId,\n    image: image,\n    latitude: latlng.latitude,\n    longitude: latlng.longitude\n  };\n  await fetch(`https://hungerwarriorapi.herokuapp.com/signup/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      'email': email,\n      'password': password\n    })\n  }).then(fetch('https://hungerwarriorapi.herokuapp.com/users/', {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userCredentials)\n  })).then(setSignUpStatus(true));\n};\n/*\n    Function to handle user logout. \n    Parameters : None \n    -- Uses firebase's signOut() function. \n  */\n\nexport const handleLogout = () => {\n  fire.auth().signOut();\n};\n/*\n    Function to check if a user is already logged in. \n    Parameters : \n    1. setUser : State function to change/edit the 'user' state variable. \n    2. setLoading : State function to change/edit the 'loading' state variable. Used to display the loading icon. \n    3. setUserDetails : State function to change/edit the 'userDetails' state variable. \n  */","map":{"version":3,"sources":["/Users/trapbookpro/Development/hwfront/src/functions/index.js"],"names":["fire","Geocode","db","firestore","authListener","setUser","setLoading","setUserDetails","auth","onAuthStateChanged","user","getUserDetails","email","handleLogin2","password","setEmailError","setPasswordError","setIsUser","fetch","method","headers","body","JSON","stringify","then","resp","json","handleLogin","catch","error","console","log","getAllListings2","setListings","getOrders2","setOrders","getAllStores2","setStores","getAllShelters","setShelters","getTotalValue","setTotalValue","getRequests2","setRequests","handleNewRequest2","request_details","getListingById2","id","setListing","getRequestById2","setRequest","getOrder2","setOrder","handleNewListing2","listing_details","handleNewOrder2","order_details","handleStatusChange2","newStatus","handleDelivererStatusChange","name","phone","deleteRequest2","deleteListing2","handleRequestStatusChange2","signInWithEmailAndPassword","err","code","token","userId","handleSignUp","location","type","image","setSignUpStatus","userCredentials","latlng","fromAddress","response","lat","lng","results","geometry","latitude","longitude","handleLogout","signOut"],"mappings":"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","sourcesContent":["import fire from \"../fire\";\nimport Geocode from \"react-geocode\";\n\nconst db = fire.firestore();\n\n//1.\nexport const authListener = (setUser, setLoading, setUserDetails) => {\n  fire.auth().onAuthStateChanged((user) => {\n    if (user) {\n      // set the 'user' state variable to the current user\n      setUser(user);\n      getUserDetails(user.email, setUserDetails);\n      setLoading(false);\n    } else {\n      setUser(\"\");\n      setLoading(false);\n    }\n  });\n};\n\nexport const handleLogin2 = async (\n  email,\n  password,\n  setEmailError,\n  setPasswordError,\n  setIsUser,\n  setUser\n) => {\n  await fetch(`https://hungerwarriorapi.herokuapp.com/login/`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      email: email,\n      password: password,\n    }),\n  })\n    .then((resp) => resp.json())\n    .then((resp) => setUser(resp))\n    .then(setIsUser(true))\n    .then(handleLogin(email, password))\n    .catch((error) => console.log(error));\n};\n\nexport const getUserDetails = (email, setUserDetails) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/users?email=${email}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then((resp) => resp.json())\n    .then((resp) => setUserDetails(resp));\n};\n\nexport const getAllListings2 = (email = \"\", setListings) => {\n  if (!email) {\n    fetch(\"https://hungerwarriorapi.herokuapp.com/listings\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((resp) => resp.json())\n      .then((resp) => setListings(resp));\n  } else {\n    fetch(`https://hungerwarriorapi.herokuapp.com/listings?email=${email}`, {\n      method : \"GET\",\n      headers : {\n        \"Content-Type\" : \"application/json\",\n      },\n    })\n    .then((resp) => resp.json())\n    .then((resp) => setListings(resp))\n  }\n};\n\nexport const getOrders2 = async (email, setOrders) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders?email=${email}`, {\n    method : \"GET\",\n    headers: {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then((resp) => setOrders(resp))\n};\n\nexport const getAllStores2 = async (setStores) => {\n  fetch('https://hungerwarriorapi.herokuapp.com/users?role=Store', {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setStores(resp)); \n}\n\nexport const getAllShelters = async (setShelters) => {\n  fetch('https://hungerwarriorapi.herokuapp.com/users?role=Shelter', {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setShelters(resp));\n}\n\nexport const getTotalValue = async (email, setTotalValue) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/totalValue?email=${email}`,{\n    method : \"GET\", \n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n  }).then((resp) => resp.json()).then(resp => setTotalValue(resp)); \n}\n\nexport const getRequests2 = async (email, setRequests) => {\n  // access the `requests` table in our database\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests?email=${email}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setRequests(resp))\n}\n\nexport const handleNewRequest2 = async (request_details) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests/`, {\n    method : \"POST\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(request_details)\n  }).then((resp) => resp.json())\n}\n\nexport const getListingById2 = async (id, setListing) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/listings?id=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n  }).then((resp) => resp.json()).then(resp => setListing(resp))\n}\n\nexport const getRequestById2 = async (id, setRequest) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests?id=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setRequest(resp))\n}\n\nexport const getOrder2 = async (id, setOrder) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders?id=${id}`, {\n    method :  \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json()).then(resp => setOrder(resp))\n}\n\n\nexport const handleNewListing2 = async(listing_details) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/listings/`, {\n    method : 'POST',\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(listing_details)\n  }).then((resp) => resp.json())\n}\n\nexport const handleNewOrder2 = async(order_details) => {\n  \n  fetch(`https://hungerwarriorapi.herokuapp.com/orders/`, {\n    method : \"POST\",\n    headers : {\n      \"Content-Type\" : \"application/json\" \n    },\n    body : JSON.stringify(order_details)\n  }).then((resp) => resp.json())\n}\n\nexport const handleStatusChange2 = async (id, newStatus) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders/?id=${id}`, {\n    method : \"PUT\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(newStatus)\n  }).then((resp) => resp.json())\n}\n\nexport const handleDelivererStatusChange = async (id, name, phone) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/orders/?id=${id}&deliverer=True/`, {\n    method : \"PUT\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify({\n      name : name,\n      phone : phone\n    })\n  }).then((resp) => resp.json()); \n}\n\nexport const deleteRequest2 = async (id) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests/?delete=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json())\n}\n\nexport const deleteListing2 = async (id) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/listings/?delete=${id}`, {\n    method : \"GET\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    }\n  }).then((resp) => resp.json())\n}\n\nexport const handleRequestStatusChange2 = async (id, newStatus) => {\n  fetch(`https://hungerwarriorapi.herokuapp.com/requests/?id=${id}`, {\n    method : \"PUT\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify(newStatus)\n  }).then((resp) => resp.json())\n}\n \n\nexport const handleLogin = (email, password) => {\n  //clearErrors();\n  //authenticate with firebase\n\n  fire\n    .auth()\n    .signInWithEmailAndPassword(email, password)\n    .catch((err) => {\n      switch (err.code) {\n        case \"auth/invalid-email\":\n        case \"auth/user-disabled\":\n        case \"auth/user-not-found\":\n          // in case we get these errors, set the emailError variable to the error message\n          break;\n        case \"auth/wrong-password\":\n          // same as above\n          break;\n      }\n      // If success, call the `getUserDetails` function to get the user's details.\n    })\n    .then(console.log(\"true\"));\n};\n\nlet token, userId;\n\nexport const handleSignUp = async (\n  name,\n  location,\n  phone,\n  type,\n  email,\n  image,\n  password,\n  setEmailError,\n  setPasswordError,\n  setSignUpStatus\n) => {\n  // authenticate with fireabase\n\n  let userCredentials; \n\n  let latlng = {}\n\n  await Geocode.fromAddress(location).then((response) => {\n    \n    const {lat, lng} = response.results[0].geometry.location;  \n    \n    latlng = {\n      latitude : lat,\n      longitude : lng\n    }\n  })  \n\n  userCredentials = {\n    name: name,\n    location: location,\n    phone: phone,\n    type: type,\n    email: email,\n    userId: userId,\n    image: image,\n    latitude : latlng.latitude, \n    longitude : latlng.longitude\n  }\n\n  await fetch(`https://hungerwarriorapi.herokuapp.com/signup/`, {\n    method : \"POST\",\n    headers : {\n      \"Content-Type\" : \"application/json\"\n    },\n    body : JSON.stringify({\n      'email' : email,\n      'password' : password\n    })\n  })\n  .then(\n    fetch('https://hungerwarriorapi.herokuapp.com/users/',{\n      method : 'POST',\n      headers : {\n        \"Content-Type\" : \"application/json\"\n      },\n      body : JSON.stringify(userCredentials)\n    })).then(setSignUpStatus(true))\n  };\n\n/*\n    Function to handle user logout. \n    Parameters : None \n    -- Uses firebase's signOut() function. \n  */\nexport const handleLogout = () => {\n  fire.auth().signOut();\n};\n\n/*\n    Function to check if a user is already logged in. \n    Parameters : \n    1. setUser : State function to change/edit the 'user' state variable. \n    2. setLoading : State function to change/edit the 'loading' state variable. Used to display the loading icon. \n    3. setUserDetails : State function to change/edit the 'userDetails' state variable. \n  */\n"]},"metadata":{},"sourceType":"module"}